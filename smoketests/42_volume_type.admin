#!/usr/bin/python
#
# Copyright 2014-2017 by Akira Yoshiyama <akirayoshiyama@gmail.com>.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.


from yakumo.smoketest import *


LOG.debug("list volume types: %s", [_.name for _ in c.volume_type.list()])
LOG.debug("list volumes: %s", [_.name for _ in c.volume.list()])
LOG.debug("list QoS: %s", [_.name for _ in c.volume_type_qos.list()])

LOG.info("Create Volume Type #1")
name = get_random_str('volume')
i = c.image.find_one(name='cirros')
with cleaner(c.volume_type.create(name=name,
                                  description='volume type 1',
                                  metadata={'foo': 'bar'},
                                  is_public=False)) as vt1:

    test("Volume Type #1 is created", vt1 is not None)
    test("Volume Type #1 name is " + name, vt1.name == name)

    # properties

    name = get_random_str('volume')
    vt1.update(name=name)

    test("Volume Type #1 has a new name", vt1.name == name)

    # metadata operation

    LOG.debug("Set/unset metadata")

    vt1.set_metadata(foo2='bar2', foo3='bar3')

    test("Volume Type #1 has 3 metadata", len(vt1.metadata) == 3)
    test("Metadata: foo -> bar", vt1.metadata['foo'] == 'bar')
    test("Metadata: foo2 -> bar2", vt1.metadata['foo2'] == 'bar2')
    test("Metadata: foo3 -> bar3", vt1.metadata['foo3'] == 'bar3')

    vt1.set_metadata(foo='bar4')
    test("Volume Type #1 has 3 metadata", len(vt1.metadata) == 3)
    test("Metadata: foo -> bar4", vt1.metadata['foo'] == 'bar4')

    vt1.unset_metadata('foo', 'foo2')
    test("Volume Type #1 has 1 metadata", len(vt1.metadata) == 1)
    test("Metadata: foo3 -> bar3", vt1.metadata['foo3'] == 'bar3')

    # Volume

    LOG.info("Create Volume #1")
    name=get_random_str('volume')
    with cleaner(c.volume.create(name=name,
                                 volume_type=vt1,
                                 size=1)) as v1:
        test("Volume #1 is created", v1 is not None)

        LOG.debug("wait for created")
        v1.wait_for_finished()

        LOG.debug("Volume #1: %s", v1.get_attrs())
        test("Volume #1 name is " + name, v1.name == name)
        test("Volume type is %s" + vt1.name, v1.volume_type == vt1)

    # QoS

    LOG.info("Create QoS #1")
    name=get_random_str('qos')
    with cleaner(c.volume_type_qos.create(name=name,
                                          availability="100",
                                          numberOfFailures="0")) as q1:

        LOG.debug("QoS #1: %s", q1.get_attrs())
        test("QoS #1 is created", q1 is not None)
        test("QoS #1 name is " + name, q1.name == name)
        test("Metadata: availability -> 100", q1.availability == "100")
        test("Metadata: numberOfFailures -> 0", q1.numberOfFailures == "0")

        q1.set_metadata(foo="bar", foo2="bar2")
        LOG.debug("QoS #1: %s", q1.get_attrs())
        test("Metadata: availability -> 100", q1.availability == "100")
        test("Metadata: numberOfFailures -> 0", q1.numberOfFailures == "0")
        test("Metadata: foo -> 'bar'", q1.foo == "bar")
        test("Metadata: foo2 -> 'bar2'", q1.foo2 == "bar2")

        q1.unset_metadata('availability', 'numberOfFailures')
        LOG.debug("QoS #1: %s", q1.get_attrs())
        test("Metadata: availability is None", q1.availability is None)
        test("Metadata: numberOfFailures is None", q1.numberOfFailures is None)
        test("Metadata: foo -> 'bar'", q1.foo == "bar")
        test("Metadata: foo2 -> 'bar2'", q1.foo2 == "bar2")

        LOG.debug("QoS #1: associate with Volume Type #1")
        q1.associate(volume_type=vt1)
        a1 = q1.get_association()
        LOG.debug("QoS #1 associations: %s", a1)
        test("QoS #1 is associated with Volume Type #1", vt1 in a1)

        LOG.debug("QoS #1: disassociate from Volume Type #1")
        q1.disassociate(volume_type=vt1)
        a1 = q1.get_association()
        LOG.debug("QoS #1 associations: %s", a1)
        test("QoS #1 is NOT associated with Volume Type #1", vt1 not in a1)

        LOG.debug("QoS #1: associate with Volume Type #1")
        q1.associate(volume_type=vt1)
        a1 = q1.get_association()
        LOG.debug("QoS #1 associations: %s", a1)
        test("QoS #1 is associated with Volume Type #1", vt1 in a1)

        LOG.debug("QoS #1: disassociate from all volume types")
        q1.disassociate_all()
        a1 = q1.get_association()
        LOG.debug("QoS #1 associations: %s", a1)
        test("QoS #1 is NOT associated", a1 == [])

    test("QoS #1 is deleted", q1 not in c.volume.list())

test("Volume Type #1 is deleted", vt1 not in c.volume.list())

LOG.debug("list volume types: %s", [_.name for _ in c.volume_type.list()])
LOG.debug("list volumes: %s", [_.name for _ in c.volume.list()])
LOG.debug("list QoS: %s", [_.name for _ in c.volume_type_qos.list()])

show_test_summary()
